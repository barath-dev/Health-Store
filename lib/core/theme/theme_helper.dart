import 'package:flutter/material.dart';
import 'package:hospital/core/utils/size_utils.dart';

ThemeData get theme => ThemeHelper().themeData();
LightCodeColors get appTheme => ThemeHelper().themeColor();

class ThemeHelper {
  final _appTheme = 'primary';
  final Map<String, LightCodeColors> _supportedCustomColor = {
    'primary': LightCodeColors()
  };

  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.lightColorScheme
  };

  LightCodeColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    return _supportedCustomColor[_appTheme] ?? LightCodeColors();
  }

  ThemeData _getThemeData() {
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.lightColorScheme;

    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.lightGreen40001,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: WidgetStateProperty.resolveWith(
          (states) {
            if (states.contains(WidgetState.selected)) {
              return colorScheme.primary;
            }
            return Colors.transparent;
          },
        ),
        side: BorderSide(
          color: appTheme.lightGreen40001,
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.1),
      ),
    );
  }

  LightCodeColors themeColor() => _getThemeColors();
  ThemeData themeData() => _getThemeData();
}

/// class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          fontWeight: FontWeight.w400,
          fontFamily: 'Poppins',
          fontSize: 12.fSize,
          color: colorScheme.onPrimary.withOpacity(1),
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 36.fSize,
          fontWeight: FontWeight.w700,
          fontFamily: 'Poppins',
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 32.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// class containing the supported color schemes.
class ColorSchemes {
  static const lightColorScheme = ColorScheme.light(
    primary: Color(0XFF2C7865),
    onPrimary: Color(0X87090909),
    onPrimaryContainer: Color(0XFF90113D),
    onError: Color(0XFFAD3B57),
    secondaryContainer: Color(0XFFAE3156),
    errorContainer: Color(0XFF0C356A),
    primaryContainer: Color(0X99FFFFFF),
  );
}

/// class containing custom colors.
class LightCodeColors {
  Color get white => const Color.fromARGB(255, 255, 255, 255);

  // Amber
  Color get amber600 => const Color(0XFFF7B100);
  Color get amberA70002 => const Color(0XFFF7AC0A);
  Color get amberA70001 => const Color(0XFFF7A911);
  Color get amberA700 => const Color(0XFFF7AE05);
// Black
  Color get black900 => const Color(0XFF000000);
// Blue
  Color get blueGray900 => const Color(0XFF263238);
  Color get blueGray700 => const Color(0XFF2B7563);
  Color get blueGray10001 => const Color(0XFFD9D9D9);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blue30004 => const Color(0XFF5DBCE8);
// BlueGrey
  Color get blueGray100 => const Color(0XFFCECECE);
  Color get blue30003 => const Color(0XFF5DB4E8);
  Color get blue30002 => const Color(0XFF5DB2E8);
  Color get blue30001 => const Color(0XFF5DADE8);
  Color get blue300 => const Color(0XFF5DC0E8);
// Cyan
  Color get cyanA20002 => const Color(0XFF14F3E0);
  Color get cyanA20003 => const Color(0XFF04FDE8);
  Color get cyanA20001 => const Color(0XFF06FBE7);
  Color get cyanA200 => const Color(0XFF14F3E1);
  Color get cyan40002 => const Color(0XFF37DED0);
  Color get cyan40001 => const Color(0XFF34E0D1);
  Color get cyan400 => const Color(0XFF32E1D2);
  Color get cyan30008 => const Color(0XFF5DDAE8);
  Color get cyan30007 => const Color(0XFF50CFC4);
  Color get cyan30006 => const Color(0XFF5DDBE8);
  Color get cyan30005 => const Color(0XFF49D3C7);
  Color get cyan30004 => const Color(0XFF5DCCE8);
  Color get cyan30003 => const Color(0XFF5DCAE8);
  Color get cyan30002 => const Color(0XFF4FD0C4);
  Color get cyan30001 => const Color(0XFF5DE1E8);
  Color get cyan300 => const Color(0XFF41D8CB);
// DeepOrange
  Color get deepOrangeA700 => const Color(0XFFEE1313);
// DeepPurple
  Color get deepPurple300 => const Color(0XFFA55CEA);
  Color get deepPurple30001 => const Color(0XFFA35CEA);
  Color get deepPurpleA200 => const Color(0XFF6B5CEA);
  Color get deepPurpleA20001 => const Color(0XFF8F5CEA);
  Color get deepPurpleA20002 => const Color(0XFF795CEA);
  Color get deepPurpleA20003 => const Color(0XFF855CEA);
// Gray
  Color get gray200 => const Color(0XFFEEEEEE);
  Color get gray20001 => const Color(0XFFEBE9EA);
  Color get gray400 => const Color(0XFFC0C6B8);
  Color get gray40001 => const Color(0XFFBCC5B0);
  Color get gray50087 => const Color(0X87999999);
  Color get gray600 => const Color(0XFFA96F5C);
  Color get gray60001 => const Color(0XFF828282);
  Color get gray60002 => const Color(0XFFA87B5D);
  Color get gray60003 => const Color(0XFFA9705C);
  Color get gray700 => const Color(0XFF585858);
  Color get gray800 => const Color(0XFF3B3B44);
// Green
  /// Buttom color
  Color get green => const Color(0XFF2C7865);
  Color get green50 => const Color(0XFFE9F4D9);
  Color get greenA700 => const Color(0XFF13EE36);
// Indigo
  Color get indigoA200 => const Color(0XFF635CEA);
  Color get indigoA20001 => const Color(0XFF655CEA);
// LightGreen
  Color get lightGreen400 => const Color(0XFFA3B763);
  Color get lightGreen100 => const Color(0XFFE9F4D9);
  Color get lightGreen40001 => const Color(0XFF90D26D);
  Color get lightGreen40002 => const Color(0XFFA59760);
  Color get lightGreen40003 => const Color(0XFFA4AC62);
  Color get lightGreen50 => const Color(0XFFF3F9EB);
// Orange
  Color get orange500 => const Color(0XFFFF9800);
  Color get orangeA200 => const Color(0XFFF7973A);
  Color get orangeA20001 => const Color(0XFFF79838);
  Color get orangeA20002 => const Color(0XFFF79343);
  Color get orangeA20003 => const Color(0XFFF79148);
// Pink
  Color get pink800 => const Color(0XFFAC4958);
  Color get pink80001 => const Color(0XFFAC2453);
// Purple
  Color get purple300 => const Color(0XFFC75CEA);
  Color get purple30001 => const Color(0XFFBB5CEA);
  Color get purple30002 => const Color(0XFFA85CEA);
  Color get purpleA200 => const Color(0XFFD05CEA);
  Color get purpleA20001 => const Color(0XFFD15CEA);
// Teal
  Color get tealA200 => const Color(0XFF5DFAE9);
  Color get tealA20001 => const Color(0XFF5DEAE8);
  Color get tealA20002 => const Color(0XFF5DF7E9);
  Color get tealA400 => const Color(0XFF23EAD9);
  Color get tealA40001 => const Color(0XFF1CEEDC);
  // Yellow
  Color get yellow800 => const Color(0XFFF7A31F);
  Color get yellow80001 => const Color(0XFFF79C2F);
  Color get yellow80002 => const Color(0XFFF7A912);
  Color get yellow80003 => const Color(0XFFF79D2C);
  Color get yellow80004 => const Color(0XFFF7A619);
  Color get yellow900 => const Color(0XFFF07C2E);
  Color get yellow90001 => const Color(0XFFC37D16);
}
